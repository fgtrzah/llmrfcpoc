export SYS_SECRET_KEY=
export SECRET_KEY=
export SYS_SK_ALG=HS256
export SYS_HASHED_PW=
export SYS_ACCESS_TOKEN_TTL=
export SYS_USER=

# Default values are optimized for production to avoid having to configure
# much in production.
#
# However it should be easy to get going in development too. If you see an
# uncommented option that means it's either mandatory to set or it's being
# overwritten in development to make your life easier.

# Enable BuildKit by default:
#   https://docs.docker.com/develop/develop-images/build_enhancements
export DOCKER_BUILDKIT=1

# Rather than use the directory name, let's control the name of the project.
export COMPOSE_PROJECT_NAME=

# In development we want all services to start but in production you don't
# need the asset watchers to run since assets get built into the image.
#
# You can even choose not to run postgres and redis in prod if you plan to use
# managed cloud services. Everything "just works", even optional depends_on!
#export COMPOSE_PROFILES=postgres,redis,web,worker
export COMPOSE_PROFILES=postgres,redis,assets,web,worker

# If you're running native Linux and your uid:gid isn't 1000:1000 you can set
# these to match your values before you build your image. You can check what
# your uid:gid is by running `id` from your terminal.
#export UID=1000
#export GID=1000

# You can choose between DEBUG, INFO, WARNING, ERROR, CRITICAL or FATAL.
# DEBUG tends to get noisy but it could be useful for troubleshooting.
export CELERY_LOG_LEVEL=info

# Should Docker restart your containers if they go down in unexpected ways?
#export DOCKER_RESTART_POLICY=unless-stopped
export DOCKER_RESTART_POLICY=unless-stopped

# What health check test command do you want to run? In development, having it
# curl your web server will result in a lot of log spam, so setting it to
# /bin/true is an easy way to make the health check do basically nothing.
# export DOCKER_WEB_HEALTHCHECK_TEST="curl localhost:8000/up"
export DOCKER_WEB_HEALTHCHECK_TEST=/bin/true

# What ip:port should be published back to the Docker host for the app server?
# If you're using Docker Toolbox or a custom VM you can't use 127.0.0.1. This
# is being overwritten in dev to be compatible with more dev environments.
#
# If you have a port conflict because something else is using 8000 then you
# can either stop that process or change 8000 to be something else.
#
# Use the default in production to avoid having gunicorn directly accessible to
# the internet since it'll very likely be behind nginx or a load balancer.
#export DOCKER_WEB_PORT_FORWARD=127.0.0.1:8000
export DOCKER_WEB_PORT_FORWARD=8000

# What volume path should be used? In dev we want to volume mount everything
# so that we can develop our code without rebuilding our Docker images.
#export DOCKER_WEB_VOLUME=./public:/app/public
export DOCKER_WEB_VOLUME=.:/app

# What CPU and memory constraints will be added to your services? When left at
# 0, they will happily use as much as needed.
export DOCKER_POSTGRES_CPUS=0
export DOCKER_POSTGRES_MEMORY=0
export DOCKER_REDIS_CPUS=0
export DOCKER_REDIS_MEMORY=0
export DOCKER_WEB_CPUS=0
export DOCKER_WEB_MEMORY=0
export DOCKER_WORKER_CPUS=0
export DOCKER_WORKER_MEMORY=0

# PROPRIETARY
# TODO: opt for layering, frugal obfuscation
export OPENAI_API_KEY=
export AUTHSECRET=
export OAIENDPOINT=https://api.openai.com/
export OAIEMBEDDINGMODEL=text-embedding-ada-002
export OAIPROMPTINGMODEL=gpt-3.5-turbo
export OAICHATMODEL=gpt-4
export DTEP=https://datatracker.ietf.org/
export AUTH0_DOMAIN=
export AUTH0_CLIENT_ID=
export AUTH0_CLIENT_SECRET=
export AUTH0_API_AUDIENCE=
export AUTH0_ISSUER=
export AUTH0_ALGORITHMS=RSA256
export APICLIENTACCESSTOKEN=
